# Climate Controller - Goat Summit
# Andrew Villeneuve 2021

### PIN MAPPINGS - BOARD REV 4.1F ###

# GPIO0       - Encoder Switch / Flash
# GPIO2       - Status LED (Invert)
# GPIO4       - Display Clock
# GPIO5       - Thermosensor
# GPIO12      - Encoder Signal
# GPIO13      - Encoder Clock
# GPIO14      - Display Data
# GPIO15      - Heater Relay
# GPIO16      - Display Enable (Invert)

esphome:
  name: goatsummit_thermostat
  on_boot:
    then:
      - lambda: |-
          id(goat_summit_thermostat).target_temperature = id(last_known_target_temperature);

esp8266:
  board: esp12e   # 12E and 12F are pin-identical
  restore_from_flash: true

preferences:
  flash_write_interval: 5min

wifi:
  ssid: !secret ssid  
  password: !secret wappw

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "GST Fallback Hotspot"
    password: !secret hotspotpw

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret apipw

ota:
  password: !secret apipw

### BEGIN GOOD STUFF ###

globals:
  - id: system_on
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: display_enabled
    type: bool
    restore_value: true
    initial_value: 'true'
  - id: last_known_target_temperature
    type: float
    restore_value: true
    initial_value: '23.33'

status_led:
  pin:
    number: GPIO2
    inverted: true

# MAX7219 Configuration
spi:
  clk_pin: GPIO4
  mosi_pin: GPIO14

display:
  - platform: max7219
    id: temp_display
    cs_pin: GPIO16
    num_chips: 1
    reverse_enable: true
    lambda: |-
      if (id(display_enabled)) {
        it.printf(0, "%2.0f", id(goat_summit_thermostat).current_temperature * (9.0/5.0) + 32.0);  // Bottom Blue Display
        if (id(system_on)) {
          if (id(heater).state) {
            it.printf(6, "%2.0f", id(goat_summit_thermostat).target_temperature * (9.0/5.0) + 32.0); // Top Red Display
          } else {
            it.printf(6, "%2.0f", id(goat_summit_thermostat).target_temperature * (9.0/5.0) + 32.0); // Top Red Display
            it.printf(2, "%2.0f", id(goat_summit_thermostat).target_temperature * (9.0/5.0) + 32.0); // Top Blue Display
            it.printf(4, "%2.0f", id(goat_summit_thermostat).target_temperature * (9.0/5.0) + 32.0); // Top Green Display
          }
        }
      }

sensor:
  - platform: dht
    model: DHT22
    pin: GPIO5
    temperature:
      name: "Goat Summit Thermostat Temperature"
      id: goat_summit_sensor
      unit_of_measurement: "Â°C"
      filters:
       - calibrate_polynomial:
          degree: 2
          datapoints:
            - 21.89 -> 19.78
            - 23.61 -> 20.72
            - 25.61 -> 22.22
            - 27.89 -> 22.11
            - 28.28 -> 23.11
    humidity:
      name: "Goat Summit Thermostat Humidity"
    update_interval: 10s
  - platform: wifi_signal
    name: "Goat Summit Thermostat Wifi"
    update_interval: 60s

  - platform: rotary_encoder
    id: rot_enc
    internal: true
    # min_value: 10
    # max_value: 37
    on_clockwise:
      - script.execute: display_sleep_timer
      - lambda: |-
          if ((id(goat_summit_thermostat).mode == CLIMATE_MODE_HEAT) && (id(goat_summit_thermostat).target_temperature < 32.22)) {
            id(goat_summit_thermostat).target_temperature += 0.555;
            id(temp_display).update();
          }
      - script.execute: set_point_timer
    on_anticlockwise:
      - script.execute: display_sleep_timer
      - lambda: |-
          if ((id(goat_summit_thermostat).mode == CLIMATE_MODE_HEAT) && (id(goat_summit_thermostat).target_temperature > 10.0)) {
            id(goat_summit_thermostat).target_temperature -= 0.555;
            id(temp_display).update();
          }
      - script.execute: set_point_timer
    pin_a:
      number: GPIO13
      mode: INPUT_PULLUP
    pin_b: 
      number: GPIO12
      mode: INPUT_PULLUP
  - platform: template
    name: "Goat Summit Heater Power"
    id: goat_summit_heater_power
    unit_of_measurement: kW
    lambda: |-
      if (id(heater).state) {
        return 1.0; // 4.2A, 1kW for 240V heater
      } else {
        return 0.0;
      }
  - platform: total_daily_energy
    name: "Goat Summit Heater Consumption"
    power_id: goat_summit_heater_power

binary_sensor:
  - platform: gpio
    id: rot_sw
    pin: 
      number: GPIO0
      mode: INPUT_PULLUP
    internal: true
    filters:
      - invert: 
    on_click:
      - script.execute: display_sleep_timer
      - lambda: |-
          auto call = id(goat_summit_thermostat).make_call();
          if (id(goat_summit_thermostat).mode == CLIMATE_MODE_HEAT) {
            call.set_mode("OFF");
          } else {
            call.set_mode("HEAT");
          }
          call.perform();

output:
  - platform: template
    id: display_timer_enabled
    type: binary
    write_action:
      - script.execute: display_sleep_timer

switch:
  - platform: gpio
    pin: GPIO15
    internal: true
    id: heater
  - platform: output
    name: "Goat Summit Thermostat Display Timer"
    id: goat_summit_display_timer_switch
    output: display_timer_enabled

script:
  - id: set_point_timer
    mode: restart
    then: 
      - delay: 2s
      # climate component doesn't support update(), so we submit an empty api call to update the frontend
      - lambda: |-
          auto call = id(goat_summit_thermostat).make_call();
          call.perform();
  - id: display_sleep_timer
    mode: restart
    then: 
      - lambda: |-
          id(display_enabled) = true;
          id(temp_display).update();
      - delay: 5s
      - lambda: |-
          if (id(goat_summit_display_timer_switch).state) {
            id(display_enabled) = false;
            id(temp_display).update();
          }

climate:
  - platform: thermostat
    name: Goat Summit Thermostat
    id: goat_summit_thermostat
    sensor: goat_summit_sensor
    min_idle_time: 10s
    min_heating_off_time: 10s
    min_heating_run_time: 10s
    default_target_temperature_low: 23.33 
    visual:
      min_temperature: 10
      max_temperature: 32.22
      temperature_step: 1.0
    heat_action:
      - switch.turn_on: heater
    idle_action:
      - switch.turn_off: heater
    heat_mode:
      - lambda: 'id(system_on) = true;'
    off_mode:
      - lambda: 'id(system_on) = false;'
    target_temperature_change_action:
      - lambda: id(last_known_target_temperature) = id(goat_summit_thermostat).target_temperature;

# Required for integrating kWh
time:
  - platform: sntp